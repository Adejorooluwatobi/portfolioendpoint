const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Project = require('../database/Project');

// Set Storage Engine
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
  }
});

// Init Upload
const upload = multer({
  storage: storage,
  limits: { fileSize: 5000000 }, // 5MB limit
  fileFilter: function (req, file, cb) {
    checkFileType(file, cb);
  }
}).single('image');

// Check File Type
function checkFileType(file, cb) {
  // Allowed file extensions
  const filetypes = /jpeg|jpg|png|gif/;
  // Check extension
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  // Check mime type
  const mimetype = filetypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb('Error: Images Only!');
  }
}

// Get all projects
router.get('/', async (req, res) => {
  try {
    const projects = await Project.find().sort({ _id: -1 }); // Sort by newest first
    res.status(200).json(projects);
  } catch (error) {
    console.error('Error fetching projects:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Get single project by ID
router.get('/:id', async (req, res) => {
  try {
    const project = await Project.findById(req.params.id);
    if (!project) {
      return res.status(404).json({ error: 'Project not found' });
    }
    res.status(200).json(project);
  } catch (error) {
    console.error('Error fetching project:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Create a new project
router.post('/', async (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ error: err });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No image uploaded' });
    }

    try {
      const { title, content } = req.body;
      
      if (!title || !content) {
        return res.status(400).json({ error: 'Title and content are required' });
      }

      const newProject = new Project({
        image: req.file.filename,
        title,
        content
      });

      const savedProject = await newProject.save();
      res.status(201).json(savedProject);
    } catch (error) {
      console.error('Error creating project:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
});

// Update a project
router.put('/:id', async (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ error: err });
    }

    try {
      const projectId = req.params.id;
      const { title, content } = req.body;
      
      if (!title || !content) {
        return res.status(400).json({ error: 'Title and content are required' });
      }

      // Find the existing project
      const existingProject = await Project.findById(projectId);
      if (!existingProject) {
        return res.status(404).json({ error: 'Project not found' });
      }

      // Update data
      const updateData = {
        title,
        content
      };

      // If new image was uploaded, update the image field and remove old image
      if (req.file) {
        updateData.image = req.file.filename;
        
        // Delete old image file if it exists
        if (existingProject.image) {
          const oldImagePath = path.join('./uploads/', existingProject.image);
          if (fs.existsSync(oldImagePath)) {
            fs.unlinkSync(oldImagePath);
          }
        }
      }

      // Update the project in the database
      const updatedProject = await Project.findByIdAndUpdate(
        projectId,
        updateData,
        { new: true }
      );

      res.status(200).json(updatedProject);
    } catch (error) {
      console.error('Error updating project:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
});

// Delete a project
router.delete('/:id', async (req, res) => {
  try {
    const projectId = req.params.id;
    
    // Find the project to delete
    const project = await Project.findById(projectId);
    if (!project) {
      return res.status(404).json({ error: 'Project not found' });
    }
    
    // Delete the image file associated with the project
    if (project.image) {
      const imagePath = path.join('./uploads/', project.image);
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath);
      }
    }
    
    // Delete the project from the database
    await Project.findByIdAndDelete(projectId);
    
    res.status(200).json({ message: 'Project deleted successfully' });
  } catch (error) {
    console.error('Error deleting project:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;


const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Blog = require('../Database/blog');

// Set Storage Engine
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: function (req, file, cb) {
    cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));
  }
});

// Init Upload
const upload = multer({
  storage: storage,
  limits: { fileSize: 5000000 },
  fileFilter: function (req, file, cb) {
    checkFileType(file, cb);
  }
}).single('image');

// Check File Type
function checkFileType(file, cb) {
  const filetypes = /jpeg|jpg|png|gif/;
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  const mimetype = filetypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb('Error: Images Only!');
  }
}

// Get all blogs
router.get('/', async (req, res) => {
  try {
    const blogs = await Blog.find().sort({ lastUpdatedDate: -1 });
    res.status(200).json(blogs);
  } catch (error) {
    console.error('Error fetching blogs:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Get a blog by ID
router.get('/:id', async (req, res) => {
  try {
    const blog = await Blog.findById(req.params.id);
    if (!blog) {
      return res.status(404).json({ error: 'Blog not found' });
    }
    res.status(200).json(blog);
  } catch (error) {
    console.error('Error fetching blog:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Create a new blog
router.post('/', async (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ error: err });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No image uploaded' });
    }

    try {
      const { title, content } = req.body;
      if (!title || !content) {
        return res.status(400).json({ error: 'Title and content are required' });
      }

      const newBlog = new Blog({
        image: req.file.filename,
        title,
        content,
        lastUpdatedDate: Date.now()
      });

      const savedBlog = await newBlog.save();
      res.status(201).json(savedBlog);
    } catch (error) {
      console.error('Error creating blog:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
});

// Delete a blog
router.delete('/:id', async (req, res) => {
  try {
    const blogId = req.params.id;
    const blog = await Blog.findById(blogId);
    if (!blog) {
      return res.status(404).json({ error: 'Blog not found' });
    }

    if (blog.image) {
      const imagePath = path.join('./uploads/', blog.image);
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath);
      }
    }

    await Blog.findByIdAndDelete(blogId);
    res.status(200).json({ message: 'Blog deleted successfully' });
  } catch (error) {
    console.error('Error deleting blog:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;




const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Category = require('../Database/category'); // Update the path as necessary

// Create a new category
router.post('/', async (req, res) => {
    try {
        const newCategory = new Category({
            title: req.body.title,
            content: req.body.content,
            LastUpdatedDate: new Date(),
            IsActive: true
        });

        await newCategory.save();

        res.status(200).send('Category added successfully!');
    } catch (error) {
        console.error('Error saving new category:', error);
        res.status(500).send('Error processing the request');
    }
});

// Fetch all categories
router.get('/', async (req, res) => {
    try {
        const categories = await Category.find().sort({ LastUpdatedDate: -1 });
        res.status(200).json(categories);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error fetching categories');
    }
});

// Fetch a category by ID
router.get('/:id', async (req, res) => {
    try {
        const category = await Category.findById(req.params.id);

        if (!category) {
            return res.status(404).send('Category not found');
        }

        res.status(200).json(category);
    } catch (error) {
        console.error(error);
        res.status(500).send('Error fetching category');
    }
});

// Update a category
router.put('/:id', async (req, res) => {
    try {
        const category = await Category.findById(req.params.id);

        if (!category) {
            return res.status(404).send('Category not found');
        }

        category.title = req.body.title;
        category.content = req.body.content;
        category.LastUpdatedDate = new Date();

        await category.save();

        res.status(200).send('Category updated successfully');
    } catch (error) {
        console.error(error);
        res.status(500).send('Error updating category');
    }
});

// Disable a category
router.put('/:id/disable', async (req, res) => {
    try {
        const category = await Category.findById(req.params.id);

        if (!category) {
            return res.status(404).send('Category not found');
        }

        category.LastUpdatedDate = new Date();
        category.IsActive = false;

        await category.save();

        res.status(200).send('Category disabled successfully');
    } catch (err) {
        console.error("Error updating category:", err);
        res.status(500).send('Error updating category');
    }
});

// Enable a category
router.put('/:id/enable', async (req, res) => {
    try {
        const category = await Category.findById(req.params.id);

        if (!category) {
            return res.status(404).send('Category not found');
        }

        category.LastUpdatedDate = new Date();
        category.IsActive = true;

        await category.save();

        res.status(200).send('Category enabled successfully');
    } catch (err) {
        console.error("Error updating category:", err);
        res.status(500).send('Error updating category');
    }
});

// Delete a category
router.delete('/:id', async (req, res) => {
    try {
        const category = await Category.findByIdAndDelete(req.params.id);

        if (!category) {
            return res.status(404).send('Category not found');
        }

        res.status(200).json({ message: 'Category deleted successfully', category });
    } catch (error) {
        console.error("Error deleting category:", error);
        res.status(500).json({ message: 'Unable to delete category' });
    }
});

module.exports = router;
